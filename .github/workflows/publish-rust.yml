name: Publish Rust

on:
  workflow_dispatch:
    inputs:
      lib_type:
        description: Library Type
        required: true
        type: choice
        options:
          - client
          - program
      level:
        description: Level
        required: true
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
          - rc
          - beta
          - alpha
          - release
          - version
      version:
        description: Version
        required: false
        type: string
      dry_run:
        description: Dry run
        required: true
        default: true
        type: boolean
      create_release:
        description: Create a GitHub release
        required: true
        type: boolean
        default: true

jobs:
  test_rust:
    name: Test Rust
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: ${{ inputs.lib_type == 'client' && 'cargo-rust-client' || 'cargo-programs' }}
          clippy: true
          rustfmt: true
          solana: true

      - name: Format
        run: |
          if [ "${{ inputs.lib_type }}" == "client" ]; then
            pnpm clients:rust:format
          else
            pnpm programs:format
          fi

      - name: Lint
        run: |
          if [ "${{ inputs.lib_type }}" == "client" ]; then
            pnpm clients:rust:lint
          else
            pnpm programs:lint
          fi

      - name: Build Program
        if: ${{ inputs.lib_type == 'client' }}
        run: pnpm programs:build

      - name: Test
        run: |
          if [ "${{ inputs.lib_type }}" == "client" ]; then
            pnpm clients:rust:test
          else
            pnpm programs:test
          fi

  publish_rust:
    name: Publish Rust
    runs-on: ubuntu-latest
    needs: test_rust
    permissions:
      contents: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          cargo-cache-key: ${{ inputs.lib_type == 'client' && 'cargo-publish-rust-client' || 'cargo-publish-program' }}
          cargo-cache-fallback-key: ${{ inputs.lib_type == 'client' && 'cargo-rust-client' || 'cargo-programs' }}
          clippy: true
          rustfmt: true

      - name: Install Cargo Release
        run: which cargo-release || cargo install cargo-release

      - name: Ensure CARGO_REGISTRY_TOKEN variable is set
        env:
          token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        if: ${{ env.token == '' }}
        run: |
          echo "The CARGO_REGISTRY_TOKEN secret variable is not set"
          echo "Go to \"Settings\" -> \"Secrets and variables\" -> \"Actions\" -> \"New repository secret\"."
          exit 1

      - name: Set Git Author
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Publish Rust
        id: publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          if [ "${{ inputs.level }}" == "version" ]; then
            LEVEL=${{ inputs.version }}
          else
            LEVEL=${{ inputs.level }}
          fi

          if [ "${{ inputs.dry_run }}" == "true" ]; then
            OPTIONS="--dry-run"
          else
            OPTIONS=""
          fi

          if [ "${{ inputs.lib_type }}" == "client" ]; then
            pnpm clients:rust:publish $LEVEL $OPTIONS
          else
            pnpm programs:publish $LEVEL $OPTIONS
          fi

      - name: Push Commit and Tag
        if: github.event.inputs.dry_run != 'true'
        run: git push origin --follow-tags

      - name: Create GitHub release
        if: github.event.inputs.create_release == 'true' && github.event.inputs.dry_run != 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ inputs.lib_type == 'client' && 'rust' || 'program' }}@v${{ steps.publish.outputs.new_version }}
